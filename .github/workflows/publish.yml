# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Python Package

on:
  push:
    branches:
    - test-upload

jobs:
  release:
    # - name: 'Check tag exists'
    #   id: tagged
    #   shell: bash
    #   run: |
    #     git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    #     git show-ref --tags --verify --quiet -- "refs/tags/python-${{ matrix.python-version }}-cu${{ matrix.cuda-version }}-torch${{ matrix.torch-version }}" && echo "::set-output name=tagged::0" || echo "::set-output name=tagged::1"

    # - name: Create Relase Tag
    #   if: steps.tagged.outputs.tagged == 1
    #   id: create-tag
    #   uses: rickstaa/action-create-tag@v1
    #   with:
    #     tag: python-${{ matrix.python-version }}-cu${{ matrix.cuda-version }}-torch${{ matrix.torch-version }}
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v1-test
          release_name: Release v1-test
      
  wheel:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
          os: [ubuntu-20.04]
          python-version: ['3.7', '3.8']
          torch-version: [1.11.0, 1.12.0]
          cuda-version: ['113']
          exclude:
            - torch-version: 1.11.0
              cuda-version: 'cu116'
            - torch-version: 1.12.0
              cuda-version: 'cu115'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Set up Linux Env
      #   if: ${{ runner.os == 'Linux' }}
      #   run: |
      #     sudo rm -rf /usr/share/dotnet
      #     bash .github/workflows/env.sh
      #   shell:
      #     bash

      # - name: Install CUDA ${{ matrix.cuda-version }}
      #   if: ${{ matrix.cuda-version != 'cpu' }}
      #   run: |
      #     bash .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}.sh
      #   shell:
      #     bash

      # - name: Check GPU Env
      #   if: ${{ matrix.cuda-version != 'cpu' }}
      #   run: |
      #     source .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}-env.sh
      #     nvcc --version
      #   shell:
      #     bash

      # - name: Install PyTorch ${{ matrix.torch-version }}+cu${{ matrix.cuda-version }}
      #   run: |
      #     pip install numpy pyyaml scipy ipython mkl mkl-include ninja cython typing pandas typing-extensions dataclasses && conda clean -ya
      #     pip install --no-index --no-cache-dir torch==${{ matrix.torch-version }} -f https://download.pytorch.org/whl/cu${{ matrix.cuda-version }}/torch_stable.html
      #     python --version
      #     python -c "import torch; print('PyTorch:', torch.__version__)"
      #     python -c "import torch; print('CUDA:', torch.version.cuda)"
      #     python -c "from torch.utils import cpp_extension; print (cpp_extension.CUDA_HOME)"
      #   shell:
      #     bash

      # - name: Build wheel
      #   run: |
      #     export FORCE_CUDA="1"
      #     export PATH=/usr/local/nvidia/bin:/usr/local/nvidia/lib64:$PATH
      #     export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
      #     export CUDA_INSTALL_DIR=/usr/local/cuda-11.3$CUDA_INSTALL_DIR
      #     pip install wheel
      #     python setup.py bdist_wheel --dist-dir=dist

      - name: Get Release with tag
        id: get_current_release
        uses: joutvhu/get-release@v1
        with:
          tag_name: v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: v1-test
      #     release_name: Release v1-test
      
      - name: Upload Release Asset
        id: upload_release_asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./
          asset_name: setup.py
          asset_content_type: application/zip


      # - name: 'Check Release exists'
      #   id: release
      #   uses: phish108/release-check@1.0.11
      #   with: 
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create Release With Asset
      #   if: ${{ steps.release.outputs.proceed }} == false
      #   id: Release-AIO
      #   uses: Hs1r1us/Release-AIO@v1.0
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: python-${{ matrix.python-version }}-cu${{ matrix.cuda-version }}-torch${{ matrix.torch-version }}
      #     asset_files: './dist'