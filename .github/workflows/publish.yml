# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Python Package

on:
  push:
    branches:
    - test-workflow

jobs:
  wheel:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
          os: [ubuntu-20.04]
          python-version: ['3.8']
          torch-version: [1.11.0]
          cuda-version: ['11.3']
          exclude:
            - torch-version: 1.11.0
              cuda-version: 'cu116'
            - torch-version: 1.12.0
              cuda-version: 'cu115'

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Linux Env
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo rm -rf /usr/share/dotnet
          bash .github/workflows/env.sh

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          bash .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}.sh

      - name: Check GPU Env
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          source .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}-env.sh
          nvcc --version
          conda --version

      - name: Install PyTorch ${{ matrix.torch-version }}+cu${{ matrix.cuda-version }}
        run: |
          conda install -y python=${{ matrix.python-version }} && conda clean -ya
          conda install -y numpy pyyaml scipy ipython mkl mkl-include ninja cython typing pandas typing-extensions dataclasses && conda clean -ya
          conda install pytorch=${{ matrix.torch-version }} cudatoolkit=${{ matrix.cuda-version }} -c pytorch     
          /bin/nvcc --version
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "from torch.utils import cpp_extension; print (cpp_extension.CUDA_HOME)"

      - name: Build wheel
        run: |
          pip install wheel
          python setup.py bdist_wheel --dist-dir=dist